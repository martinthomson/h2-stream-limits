{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-03-31T01:18:03.023225+00:00",
  "repo": "martinthomson/h2-stream-limits",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKburo8512m60",
      "title": "Recommend that clients limit stream creation for new connections",
      "url": "https://github.com/martinthomson/h2-stream-limits/issues/1",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Right now, the initial stream limit is \u221e (or really $2^{30}$).  This isn't ideal and doesn't really reflect good practice. We should recommend -- or even require -- that clients limit the number of streams that they create before learning the server stream limit.\r\n\r\nPicking the right number is a little hazardous, but I think that we can look at common practice and go with a more conservative number than the 100 we currently recommend.  Many servers will want to increase that, but it shouldn't be too much of a problem if clients cannot open that many requests immediately.\r\n\r\nIf the number is too high for a server, we can rely on the existing HTTP/2 recommendation where the server is required to reject excess requests.  With a relatively small limit, the effect of that should be more manageable.",
      "createdAt": "2023-11-04T09:17:51Z",
      "updatedAt": "2023-11-08T22:20:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "You probably already had this in mind but allowing a client overshoot would require a relaxation of https://martinthomson.github.io/h2-stream-limits/draft-thomson-httpbis-h2-stream-limits.html#section-3.1-2, or else the server will close the connection. Possibly even like \"MUST enforce (but not during the first client flight or an RTT or something\"",
          "createdAt": "2023-11-04T10:59:40Z",
          "updatedAt": "2023-11-04T10:59:40Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "+1, as said on the mailing list.\r\n\r\nWe should use the opportunity of defining a protocol extension to fix the issue throughout the entire lifecyle of the connection, the only way of doing that would be to \"require\" clients stay within a specific number from the beginning of the connection.\r\n\r\nI'm fine with having a hard-coded number. In practice, the only moment this applies to clients would be during 0-RTT.",
          "createdAt": "2023-11-04T11:43:51Z",
          "updatedAt": "2023-11-04T11:43:51Z"
        },
        {
          "author": "gstrauss",
          "authorAssociation": "NONE",
          "body": "+1\r\n\r\nMy understanding is that QUIC max streams is 0 for each of the various stream types, if a limit is not provided during negotiation.  While I think that 0 is too low for HTTP/2, any large number (including 100) is plenty to do damage in a DoS attack if a server has to handle that quantity before rejecting.  It is also a burden on smaller systems, such as embedded systems where CPU and memory are constrained.  On such systems, the CPU overhead of TLS encryption can easily make the embedded system slower than network wire speed.\r\n\r\nlighttpd sets SETTINGS_MAX_CONCURRENT_STREAMS 8, but tries to be more accommodating to an initial burst of streams prior to SETTINGS ackn.  However, a malicious client might not send SETTINGS ackn.  That is true for more than only malicious clients.  I found when prototyping HTTP/2 rapid reset attacks and mitigations against my own private server using an off-the-shelf python HTTP/2 library, misuse of the library (which I did!) can also result in SETTINGS ackn not being sent.\r\n\r\nF5 sets SETTINGS_MAX_CONCURRENT_STREAMS 10 according to https://my.f5.com/manage/s/article/K000137106,\r\n\"The default value for streams per connection is set to 10 because F5 had anticipated this type of flaw in the HTTP/2 protocol.\"\r\n\r\nWhile I admit my bias since I am a lighttpd developer, I propose that client endpoints supporting MAX_STREAMS should start with SETTINGS_MAX_CONCURRENT_STREAMS 8 or 10 until the client receive the initial server SETTINGS frame following the server HTTP/2 connection preface.  Once the initial SETTINGS frame is receive from the server, if SETTINGS_MAX_CONCURRENT_STREAMS was not sent by the server, then client may choose to presume prior behavior (with the RFC 7540 \"recommendation\" of 100).  Note: there may be a delay before the client receives the (optional) MAX_STREAMS frame in the frames that follow HTTP/2 connection preface and SETTINGS.\r\n\r\nImplementing MAX_STREAMS in my server becomes much more complex -- and much less effective against attacks -- if I have to support a large number of initial streams from the client even if the client sends MAX_STREAMS.  While the RFCs allow a server to refuse streams for any reason, practical considerations currently force even small servers to consider trying to somehow handle a large number of initial requests instead of immediately refusing them.  With well-behaved clients, a server can switch to more defined behavior once SETTINGS ackn is received from client.\r\n\r\nPlease consider settings a small, non-zero value such as 8 or 10 for SETTINGS_MAX_CONCURRENT_STREAMS when clients support MAX_STREAMS.",
          "createdAt": "2023-11-08T21:58:17Z",
          "updatedAt": "2023-11-08T21:58:17Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "In case it isn't clear, I support a Conservative sub-100 limit.\r\n\r\nI might be inclined to try and make that  enforced more strongly using an alternative mechanism that thus draft, but let's see how IETF 118 discussions go.",
          "createdAt": "2023-11-08T22:07:53Z",
          "updatedAt": "2023-11-08T22:07:53Z"
        },
        {
          "author": "gstrauss",
          "authorAssociation": "NONE",
          "body": "BTW, if MAX_STREAMS proposal *recommends* instead of *requiring* a lower initial limit for SETTINGS_MAX_CONCURRENT_STREAMS, then the Security Considerations section should add a paragraph or two describing how MAX_STREAMS does not address the problems with effectively unlimited (2<sup>30</sup>) burst of initial requests.  Rather than do that, I hope to see a lower limit *required* for SETTINGS_MAX_CONCURRENT_STREAMS when MAX_STREAMS is supported.",
          "createdAt": "2023-11-08T22:20:22Z",
          "updatedAt": "2023-11-08T22:20:58Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOKburo8514uyh",
      "title": "Can send multiple MAX_STREAMS with Maximum Stream Identifier 0 value?",
      "url": "https://github.com/martinthomson/h2-stream-limits/issues/3",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> Endpoints can only increase the value that they include in a MAX_STREAMS frame. An endpoint MUST treat receipt of a Maximum Stream Identifier that is equal to or smaller than a value that it has previously received as a connection error of type PROTOCOL_ERROR; see [Section 5.4.1](https://rfc-editor.org/rfc/rfc9113#section-5.4.1) of [[HTTP/2](https://github.com/martinthomson/h2-stream-limits/issues/new#RFC9113)]. Note that a value of 0, which can be used to indicate support for this feature (see [Section 3.2](https://github.com/martinthomson/h2-stream-limits/issues/new#negotiating)) without permitting the creation of streams, is permitted for both client and server.\r\n\r\nThe exception might allow an endpoint to send multiple MAX_STREAMS with 0, which is pointless but might be spammable. \r\n\r\nSuggest we tighten the exception to allow only 1 instance of  0 MAX_STREAMS frame in a connection.",
      "createdAt": "2023-11-05T14:10:25Z",
      "updatedAt": "2023-11-05T14:56:08Z",
      "closedAt": "2023-11-05T14:56:08Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "body": "That was my intent: the note says that you can go from max = unknown to max = 0.  That should only happen once though.  I'll try to clarify.",
          "createdAt": "2023-11-05T14:13:24Z",
          "updatedAt": "2023-11-05T14:13:24Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKburo852UdSj",
      "title": "Wait for SETTINGS",
      "url": "https://github.com/martinthomson/h2-stream-limits/issues/8",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Require that the client wait for server settings.  In TLS 1.3, that won't add latency.  Also, require that the client remember initial setting value for 0-RTT.",
      "createdAt": "2023-11-09T08:21:57Z",
      "updatedAt": "2023-11-12T23:29:11Z",
      "closedAt": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds solid",
          "createdAt": "2023-11-09T08:48:09Z",
          "updatedAt": "2023-11-09T08:48:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "body": "Ilari notes that there are some clients that choke on 0.5RTT from the server.  That will need investigation, otherwise this might introduce unwanted latency.  Those clients are broken, but it's not the first time that broken implementations have prevented us from having nice things.",
          "createdAt": "2023-11-12T23:29:11Z",
          "updatedAt": "2023-11-12T23:29:11Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 2,
      "id": "PR_kwDOKburo85enk3X",
      "title": "talk about stream violation closure too",
      "url": "https://github.com/martinthomson/h2-stream-limits/pull/2",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Imagine a request with body. In some deployments, they might parse HEADERS and then pass on the request to a backend without awaiting/buffering a request body. \r\n\r\nA client can \"cancel\" the stream, without resetting the stream using RST_STREAM, by violating the protocol rules in https://www.rfc-editor.org/rfc/rfc9113.html#section-8.1. The client can depend on a compliant server to do this deterministically and hence construct frame sequences that rapid cancel and create.\r\n\r\nThis PR adds some awareness for this form of the attack but tries to avoid polluting the whole doc with it.",
      "createdAt": "2023-11-05T13:59:23Z",
      "updatedAt": "2023-11-06T06:51:57Z",
      "baseRepository": "martinthomson/h2-stream-limits",
      "baseRefName": "main",
      "baseRefOid": "9f79d4feb398104668f623d666396c6fea547b0b",
      "headRepository": "LPardue/h2-stream-limits",
      "headRefName": "main",
      "headRefOid": "e0d24241bed5be44c948aebe21bac257a3221919",
      "closedAt": "2023-11-06T06:51:57Z",
      "mergedAt": "2023-11-06T06:51:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "858f9113859025c09d45a698c1e619d6c4311ff8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKburo85mKXfF",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:11:33Z",
          "updatedAt": "2023-11-05T14:12:15Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Do you think that it is worth noting that a stream error like this could result in a connection error, which would make the error -> close/reset path unavailable to an attacker.  Obviously, an attacker can simply check what the victim would do before trying that approach.",
              "createdAt": "2023-11-05T14:11:33Z",
              "updatedAt": "2023-11-05T14:12:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKXtS",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:17:32Z",
          "updatedAt": "2023-11-05T14:17:33Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "That crossed my mind yes. Even if a client didn't check, there's not much punishment for just giving it a go - it either works or it doesn't and the resources (e.g. bandwidth) required to try it out are not enormous.\r\n\r\nAn endpoint might even close _some_ streams until a threshold is reached - and then close the connection. So trying to explain that felt like it could be a distraction.\r\n\r\nI can add a sentence here if you like, or punt it to the security considerations, or do nothing.",
              "createdAt": "2023-11-05T14:17:32Z",
              "updatedAt": "2023-11-05T14:17:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYE8",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:27:59Z",
          "updatedAt": "2023-11-05T14:28:00Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "How about this?\r\n\r\n```suggestion\r\nThis limit is not effective in the case that streams are quickly cancelled.\r\nThe creator of a stream can cancel it using the `RST_STREAM` frame.  The\r\ncreator of a stream could also cause its peer to send `RST_STREAM` by\r\npurposefully sending frames that violate HTTP/2 rules, unless errors also\r\ncause the peer to close the connection. Either of these methods has\r\n```",
              "createdAt": "2023-11-05T14:28:00Z",
              "updatedAt": "2023-11-05T14:28:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYM8",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:31:31Z",
          "updatedAt": "2023-11-05T14:31:31Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "So ... I have an implementation that responds with a 400 Bad Request + END_STREAM :smile: ",
              "createdAt": "2023-11-05T14:31:31Z",
              "updatedAt": "2023-11-05T14:31:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYTW",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:34:06Z",
          "updatedAt": "2023-11-05T14:34:06Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Did you open an issue on HTTP/2 suggesting that we permit that reaction?",
              "createdAt": "2023-11-05T14:34:06Z",
              "updatedAt": "2023-11-05T14:34:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYaP",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:37:28Z",
          "updatedAt": "2023-11-05T14:37:28Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "yeh nah, this is that other discussion we were having on the list. My interpretation of https://datatracker.ietf.org/doc/html/rfc9114#section-4.1.2-5, specifically\r\n\r\n> For malformed requests, a server MAY send an HTTP response indicating the error prior to closing or resetting the stream.\r\n\r\nis that its fine not to send a RST_STREAM if I'm going to close the stream any way",
              "createdAt": "2023-11-05T14:37:28Z",
              "updatedAt": "2023-11-05T14:37:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYf_",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:40:07Z",
          "updatedAt": "2023-11-05T14:40:07Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I know.  It's just that your reaction is off the books for now, so we don't need to say that it's acceptable here.",
              "createdAt": "2023-11-05T14:40:07Z",
              "updatedAt": "2023-11-05T14:40:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKYrh",
          "commit": {
            "abbreviatedOid": "9903f94"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:44:02Z",
          "updatedAt": "2023-11-05T14:44:02Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Fair",
              "createdAt": "2023-11-05T14:44:02Z",
              "updatedAt": "2023-11-05T14:44:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOKburo85enlz8",
      "title": "Fixup frame specifics",
      "url": "https://github.com/martinthomson/h2-stream-limits/pull/4",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixup frame definition",
      "createdAt": "2023-11-05T14:12:02Z",
      "updatedAt": "2023-11-05T14:22:58Z",
      "baseRepository": "martinthomson/h2-stream-limits",
      "baseRefName": "main",
      "baseRefOid": "9f79d4feb398104668f623d666396c6fea547b0b",
      "headRepository": "LPardue/h2-stream-limits",
      "headRefName": "frame-of-deftness",
      "headRefOid": "504299e9891aab65774cb06a7619a9cb81440125",
      "closedAt": "2023-11-05T14:22:58Z",
      "mergedAt": "2023-11-05T14:22:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6d73142ef6652a138aabcd4e301011756923f1a0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKburo85mKXlb",
          "commit": {
            "abbreviatedOid": "ff7606e"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-05T14:14:08Z",
          "updatedAt": "2023-11-05T14:15:28Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Didyou intend to roll up the other PR here?  We can do PRs in parallel.",
              "createdAt": "2023-11-05T14:14:09Z",
              "updatedAt": "2023-11-05T14:15:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKburo85mKX1D",
          "commit": {
            "abbreviatedOid": "ff7606e"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T14:21:01Z",
          "updatedAt": "2023-11-05T14:21:01Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Sorry no, I meant to split them but completely bollocksed it up. Force pushed to drop the unrelated commit.",
              "createdAt": "2023-11-05T14:21:01Z",
              "updatedAt": "2023-11-05T14:21:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKburo85enoIE",
      "title": "MAX_STREAMS 0 is just once",
      "url": "https://github.com/martinthomson/h2-stream-limits/pull/5",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This note was not intended to imply that a zero could be sent multiple times.\r\n\r\nCloses #3.",
      "createdAt": "2023-11-05T14:43:35Z",
      "updatedAt": "2023-11-05T15:01:16Z",
      "baseRepository": "martinthomson/h2-stream-limits",
      "baseRefName": "main",
      "baseRefOid": "6d73142ef6652a138aabcd4e301011756923f1a0",
      "headRepository": "martinthomson/h2-stream-limits",
      "headRefName": "max0-once",
      "headRefOid": "2adffa50ab2d9958684703cf67ed121da2273b7e",
      "closedAt": "2023-11-05T14:56:07Z",
      "mergedAt": "2023-11-05T14:56:07Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4e8c4490608ba402a132750c5fc580eb70676c87"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKburo85mKZHs",
          "commit": {
            "abbreviatedOid": "2adffa5"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-05T14:51:34Z",
          "updatedAt": "2023-11-05T14:51:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOKburo85e0eiO",
      "title": "Mention the SETTINGS frame after the preface",
      "url": "https://github.com/martinthomson/h2-stream-limits/pull/6",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I always think of this SETTINGS frame as being part of the preface, but it really isn't.",
      "createdAt": "2023-11-07T15:16:44Z",
      "updatedAt": "2023-11-07T16:47:01Z",
      "baseRepository": "martinthomson/h2-stream-limits",
      "baseRefName": "main",
      "baseRefOid": "858f9113859025c09d45a698c1e619d6c4311ff8",
      "headRepository": "martinthomson/h2-stream-limits",
      "headRefName": "preface-SETTINGS",
      "headRefOid": "1b8ba5047f811140e8a5009547b565da69d28755",
      "closedAt": "2023-11-07T16:46:57Z",
      "mergedAt": "2023-11-07T16:46:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "31e20096b845a45fc171ac43d8766b77aaf47ce5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKburo85maP1Q",
          "commit": {
            "abbreviatedOid": "1b8ba50"
          },
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-07T16:27:42Z",
          "updatedAt": "2023-11-07T16:27:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOKburo85e0f0f",
      "title": "Trying out text",
      "url": "https://github.com/martinthomson/h2-stream-limits/pull/7",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "A suggestion from Glenn Strauss, that I've tweaked a little.",
      "createdAt": "2023-11-07T15:19:04Z",
      "updatedAt": "2023-11-07T17:23:13Z",
      "baseRepository": "martinthomson/h2-stream-limits",
      "baseRefName": "main",
      "baseRefOid": "858f9113859025c09d45a698c1e619d6c4311ff8",
      "headRepository": "martinthomson/h2-stream-limits",
      "headRefName": "compatible-max-streams",
      "headRefOid": "e6a8a32e80f21577c081e92a7c1b730bbc550051",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not convinced this is the right thing to be saying - I need a bit more time to think on it. But my rationale is that I want to advertise a smaller limit for concurrency and I'm currently railroaded into allowing 100 MAX_CONCURRENT_STREAMS because clients don't even wait for the SETTINGS. \r\n\r\nFurthermore, regarding the MUST NOT, that seems overkill and the opposite of our principles of giving control or agency to the thing that can be overwhelmed.",
          "createdAt": "2023-11-07T17:23:13Z",
          "updatedAt": "2023-11-07T17:23:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKburo85mZlVI",
          "commit": {
            "abbreviatedOid": "e6a8a32"
          },
          "author": "martinthomson",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "See also https://martinthomson.github.io/h2-stream-limits/draft-thomson-httpbis-h2-stream-limits.html#section-3.1-4 where I think that we are saying a very similar thing.  I don't know if this adds much value.",
          "createdAt": "2023-11-07T15:22:52Z",
          "updatedAt": "2023-11-07T15:23:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I an not sure about this \"MUST NOT\".  It might be better to just explain the consequences of failing to do this correctly.",
              "createdAt": "2023-11-07T15:22:52Z",
              "updatedAt": "2023-11-07T15:23:43Z"
            }
          ]
        }
      ]
    }
  ]
}